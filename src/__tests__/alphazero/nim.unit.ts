import { describe, test, expect } from '@jest/globals'
import { NimAction } from '../../alphazero/games/nim/nimaction'
import { Nim } from '../../alphazero/games/nim/nim'
import { NimNetModel } from '../../alphazero/games/nim/nimmodel'
import { Config } from '../../alphazero/games/core/config'
import { MuZeroNetObservation } from '../../alphazero/networks/network'

describe('Nim Unit Test:', () => {
  const factory = new Nim()
  const model = new NimNetModel()
  const config = factory.config()
  const conf = new Config(config.actionSpaceSize, model.observationSize)
  test('Check the Nim Game', async () => {
    const state = factory.reset()
    expect(state.board.toString()).toEqual('1,2,3,4,5')
    expect(factory.toString(state)).toEqual('1|2|3|4|5')
    expect(factory.legalActions(state).map(a => a.id).toString()).toEqual('0,5,6,10,11,12,15,16,17,18,20,21,22,23,24')
    const obs = model.observation(state) as MuZeroNetObservation
    expect(obs.state.toString()).toEqual('1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1')
    const s1 = factory.step(state, new NimAction(0))
    expect(s1.board.toString()).toEqual('0,2,3,4,5')
    expect(factory.legalActions(s1).map(a => a.id).toString()).toEqual('5,6,10,11,12,15,16,17,18,20,21,22,23,24')
    const s2 = factory.step(s1, new NimAction(12))
    expect(s2.board.toString()).toEqual('0,2,0,4,5')
    expect(factory.legalActions(s2).map(a => a.id).toString()).toEqual('5,6,15,16,17,18,20,21,22,23,24')
    expect(factory.expertAction(s2)).toEqual([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    const s3 = factory.step(s2, new NimAction(5))
    expect(s3.board.toString()).toEqual('0,1,0,4,5')
    expect(factory.toString(s3)).toEqual('_|1|_|4|5')
    expect(factory.legalActions(s3).map(a => a.id).toString()).toEqual('5,15,16,17,18,20,21,22,23,24')
    expect(factory.terminal(s3)).toEqual(false)
    const s4 = factory.step(s3, new NimAction(5))
    expect(s4.board.toString()).toEqual('0,0,0,4,5')
    expect(factory.toString(s4)).toEqual('_|_|_|4|5')
    expect(factory.legalActions(s4).map(a => a.id).toString()).toEqual('15,16,17,18,20,21,22,23,24')
    expect(factory.terminal(s4)).toEqual(false)
    expect(factory.reward(s4, s4.player)).toEqual(0)
    const s5 = factory.step(s4, new NimAction(18))
    expect(s5.board.toString()).toEqual('0,0,0,0,5')
    expect(factory.toString(s5)).toEqual('_|_|_|_|5')
    expect(factory.legalActions(s5).map(a => a.id).toString()).toEqual('20,21,22,23,24')
    expect(factory.terminal(s5)).toEqual(false)
    expect(factory.reward(s5, s5.player)).toEqual(0)
    const s6 = factory.step(s5, new NimAction(23))
    expect(s6.board.toString()).toEqual('0,0,0,0,1')
    expect(factory.toString(s6)).toEqual('_|_|_|_|1')
    expect(factory.legalActions(s6).map(a => a.id).toString()).toEqual('20')
    expect(factory.terminal(s6)).toEqual(true)
    expect(factory.reward(s6, s6.player)).toEqual(-1)
    const s7 = factory.step(s6, new NimAction(20))
    expect(s7.board.toString()).toEqual('0,0,0,0,0')
    expect(factory.legalActions(s7).length).toEqual(0)
    expect(factory.expertAction(s7)).toEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    expect(factory.terminal(s7)).toEqual(true)
    expect(s7.player).toEqual(-1)
    expect(factory.reward(s7, s7.player)).toEqual(1)
    expect(factory.reward(s7, -s7.player)).toEqual(-1)
    expect(factory.serialize(s4)).toEqual('[1,[0,0,0,4,5],[0,12,5,5]]')
    expect(factory.serialize(factory.deserialize(factory.serialize(s4)))).toEqual('[1,[0,0,0,4,5],[0,12,5,5]]')
  })
  test('Check specific Nim Game', async () => {
    const state = factory.reset()
    expect(state.board.toString()).toEqual('1,2,3,4,5')
    const s1 = factory.step(state, new NimAction(10))
    expect(s1.board.toString()).toEqual('1,2,2,4,5')
    const s2 = factory.step(s1, new NimAction(21))
    expect(s2.board.toString()).toEqual('1,2,2,4,3')
    const s3 = factory.step(s2, new NimAction(16))
    expect(s3.board.toString()).toEqual('1,2,2,2,3')
    const s4 = factory.step(s3, new NimAction(0))
    expect(s4.board.toString()).toEqual('0,2,2,2,3')
    const s5 = factory.step(s4, new NimAction(20))
    expect(s5.board.toString()).toEqual('0,2,2,2,2')
    const s6 = factory.step(s5, new NimAction(5))
    expect(s6.board.toString()).toEqual('0,1,2,2,2')
    expect(factory.expertAction(s6)).toEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3333333333333333, 0, 0, 0, 0, 0.3333333333333333, 0, 0, 0, 0, 0.3333333333333333, 0, 0, 0, 0])
    const s7 = factory.step(s6, new NimAction(10))
    expect(s7.board.toString()).toEqual('0,1,1,2,2')
  })
})
